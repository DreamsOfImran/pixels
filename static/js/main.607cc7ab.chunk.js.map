{"version":3,"sources":["components/Pixel.js","components/Row.js","components/DrawingPanel.js","components/Editor.js","App.js","index.js"],"names":["Pixel","selectedColor","useState","pixelColor","setPixelColor","oldColor","setOldColor","canChangeColor","setCanChangeColor","className","style","backgroundColor","onClick","onMouseEnter","onMouseLeave","Row","width","pixels","i","push","DrawingPanel","height","panelRef","useRef","rows","id","ref","exportComponentAsPNG","Editor","panelWidth","setPanelWidth","panelHeight","setPanelHeight","hideOptions","setHideOptions","hideDrawingPanel","setHideDrawingPanel","buttonText","setButtonText","setColor","type","value","onChange","e","target","color","onChangeComplete","hex","App","ReactDOM","render","document","getElementById"],"mappings":"wSAqCeA,EAjCD,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACCC,mBAAS,QADV,mBAC5BC,EAD4B,KAChBC,EADgB,OAEHF,mBAASC,GAFN,mBAE5BE,EAF4B,KAElBC,EAFkB,OAGSJ,oBAAS,GAHlB,mBAG5BK,EAH4B,KAGZC,EAHY,KAsBnC,OACE,qBACEC,UAAU,QACVC,MAAO,CAAEC,gBAAiBR,GAC1BS,QArBe,WACjBR,EAAcH,GACdO,GAAkB,IAoBhBK,aAjBuB,WACzBP,EAAYH,GACZC,EAAcH,IAgBZa,aAbe,WACdP,GACDH,EAAcC,GAEhBG,GAAkB,OCHPO,G,OAfH,SAAC,GAGX,IAHyC,IAA5BC,EAA2B,EAA3BA,MAAOf,EAAoB,EAApBA,cAEhBgB,EAAS,GACJC,EAAI,EAAGA,EAAIF,EAAOE,IACzBD,EAAOE,KAAK,cAAC,EAAD,CAAelB,cAAeA,GAAlBiB,IAI1B,OACE,qBAAKT,UAAU,MAAf,SACGQ,M,QCeQG,G,OAxBM,SAAC,GAKpB,IAL0D,IAApCJ,EAAmC,EAAnCA,MAAOK,EAA4B,EAA5BA,OAAQpB,EAAoB,EAApBA,cAC/BqB,EAAWC,mBAEbC,EAAO,GAEFN,EAAI,EAAGA,EAAIG,EAAQH,IAC1BM,EAAKL,KAAK,cAAC,EAAD,CAAaH,MAAOA,EAAOf,cAAeA,GAAhCiB,IAGtB,OACE,sBAAKO,GAAG,eAAR,UACE,qBAAKA,GAAG,SAASC,IAAKJ,EAAtB,SACGE,IAEH,wBACEf,UAAU,SACVG,QAAS,kBAAMe,+BAAqBL,IAFtC,gCCsDSM,G,OApEA,WAAO,IAAD,EACiB1B,mBAAS,IAD1B,mBACZ2B,EADY,KACAC,EADA,OAEmB5B,mBAAS,IAF5B,mBAEZ6B,EAFY,KAECC,EAFD,OAGmB9B,oBAAS,GAH5B,mBAGZ+B,EAHY,KAGCC,EAHD,OAI6BhC,oBAAS,GAJtC,mBAIZiC,EAJY,KAIMC,EAJN,OAKiBlC,mBAAS,iBAL1B,mBAKZmC,EALY,KAKAC,EALA,OAMepC,mBAAS,WANxB,mBAMZD,EANY,KAMGsC,EANH,KAsBnB,OACE,sBAAKd,GAAG,SAAR,UACE,8CACCU,GAAoB,wDAEpBA,GAAqB,sBAAKV,GAAG,UAAR,UACpB,sBAAKhB,UAAU,SAAf,UACE,uBACE+B,KAAK,SACL/B,UAAU,aACVgC,MAAOZ,EACPa,SAAU,SAACC,GACTb,EAAca,EAAEC,OAAOH,UAG3B,4CAEF,sBAAKhC,UAAU,SAAf,UACE,uBACE+B,KAAK,SACL/B,UAAU,aACVgC,MAAOV,EACPW,SAAU,SAACC,GACTX,EAAeW,EAAEC,OAAOH,UAG5B,gDAIJ,wBAAQhC,UAAU,SAASG,QA5CA,WAC7BsB,GAAgBD,GAChBG,GAAqBD,GAGjBG,EADW,kBAAfD,EACkB,QACA,kBAsChB,SAA6DA,IAE5DJ,GACC,cAAC,IAAD,CAAcY,MAAO5C,EAAe6C,iBArCtB,SAACD,GACnBN,EAASM,EAAME,QAsCZd,GACC,cAAC,EAAD,CACEjB,MAAOa,EACPR,OAAQU,EACR9B,cAAeA,SCtDV+C,G,OARH,WACV,OACE,qBAAKvC,UAAU,MAAf,SACE,cAAC,EAAD,Q,OCHNwC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.607cc7ab.chunk.js","sourcesContent":["import React, { useState } from 'react'\n\nimport '../styles/pixel.scss'\n\nconst Pixel = ({ selectedColor }) => {\n  const [pixelColor, setPixelColor] = useState(\"#fff\")\n  const [oldColor, setOldColor] = useState(pixelColor)\n  const [canChangeColor, setCanChangeColor] = useState(true)\n\n  const applyColor = () => {\n    setPixelColor(selectedColor)\n    setCanChangeColor(false)\n  }\n\n  const changeColorOnHover = () => {\n    setOldColor(pixelColor)\n    setPixelColor(selectedColor)\n  }\n\n  const resetColor = () => {\n    if(canChangeColor) {\n      setPixelColor(oldColor)\n    }\n    setCanChangeColor(true)\n  }\n\n  return (\n    <div\n      className=\"pixel\"\n      style={{ backgroundColor: pixelColor }}\n      onClick={applyColor}\n      onMouseEnter={changeColorOnHover}\n      onMouseLeave={resetColor}\n    />\n  )\n}\n\nexport default Pixel\n","import React from 'react'\nimport Pixel from './Pixel'\n\nimport '../styles/row.scss'\n\nconst Row = ({ width, selectedColor }) => {\n\n  let pixels = []\n  for (let i = 0; i < width; i++) {\n    pixels.push(<Pixel key={i} selectedColor={selectedColor} />)\n    \n  }\n\n  return (\n    <div className=\"row\">\n      {pixels}\n    </div>\n  )\n}\n\nexport default Row\n","import React, { useRef } from 'react'\nimport Row from './Row';\nimport { exportComponentAsPNG } from 'react-component-export-image'\n\nimport '../styles/drawingPanel.scss'\n\nconst DrawingPanel = ({ width, height, selectedColor }) => {\n  const panelRef = useRef()\n\n  let rows = [];\n\n  for (let i = 0; i < height; i++) {\n    rows.push(<Row key={i} width={width} selectedColor={selectedColor} />)\n  }\n\n  return (\n    <div id=\"drawingPanel\">\n      <div id=\"pixels\" ref={panelRef}>\n        {rows}\n      </div>\n      <button\n        className=\"button\"\n        onClick={() => exportComponentAsPNG(panelRef)}\n      >\n        Export as PNG\n      </button>\n    </div>\n  )\n}\n\nexport default DrawingPanel\n","import React, { useState } from 'react'\nimport { CirclePicker } from 'react-color'\nimport DrawingPanel from './DrawingPanel'\n\nimport '../styles/editor.scss'\n\nconst Editor = () => {\n  const [panelWidth, setPanelWidth] = useState(16)\n  const [panelHeight, setPanelHeight] = useState(16)\n  const [hideOptions, setHideOptions] = useState(false)\n  const [hideDrawingPanel, setHideDrawingPanel] = useState(true)\n  const [buttonText, setButtonText] = useState(\"start drawing\")\n  const [selectedColor, setColor] = useState(\"#f44336\")\n\n  const initializeDrawingPanel = () => {\n    setHideOptions(!hideOptions)\n    setHideDrawingPanel(!hideDrawingPanel)\n\n    buttonText === \"start drawing\"\n      ? setButtonText(\"reset\")\n      : setButtonText(\"start drawing\")\n    \n  }\n\n  const changeColor = (color) => {\n    setColor(color.hex)\n  }\n\n  return (\n    <div id=\"editor\">\n      <h1>Pixel Editor</h1>\n      {hideDrawingPanel && <h2>Enter Panel Dimensions</h2>}\n\n      {hideDrawingPanel && (<div id=\"options\">\n        <div className=\"option\">\n          <input\n            type=\"number\"\n            className=\"panelInput\"\n            value={panelWidth}\n            onChange={(e) => {\n              setPanelWidth(e.target.value)\n            }}\n          />\n          <span>Width</span>\n        </div>\n        <div className=\"option\">\n          <input\n            type=\"number\"\n            className=\"panelInput\"\n            value={panelHeight}\n            onChange={(e) => {\n              setPanelHeight(e.target.value)\n            }}\n          />\n          <span>Height</span>\n        </div>\n      </div>)}\n\n      <button className=\"button\" onClick={initializeDrawingPanel}>{buttonText}</button>\n\n      {hideOptions && (\n        <CirclePicker color={selectedColor} onChangeComplete={changeColor} />\n      )}\n      {hideOptions && (\n        <DrawingPanel\n          width={panelWidth}\n          height={panelHeight}\n          selectedColor={selectedColor}\n        />\n      )}\n    </div>\n  )\n}\n\nexport default Editor\n","import React from 'react'\nimport Editor from './components/Editor'\n\nimport './styles/app.scss'\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Editor />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './styles/index.scss'\n\nReactDOM.render(<App />, document.getElementById(\"root\"))"],"sourceRoot":""}